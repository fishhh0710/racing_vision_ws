// Generated by gencpp from file yolo/LabeledPointArray.msg
// DO NOT EDIT!


#ifndef YOLO_MESSAGE_LABELEDPOINTARRAY_H
#define YOLO_MESSAGE_LABELEDPOINTARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolo
{
template <class ContainerAllocator>
struct LabeledPointArray_
{
  typedef LabeledPointArray_<ContainerAllocator> Type;

  LabeledPointArray_()
    : labels()
    , x()
    , y()
    , z()  {
    }
  LabeledPointArray_(const ContainerAllocator& _alloc)
    : labels(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _labels_type;
  _labels_type labels;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_type;
  _x_type x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::yolo::LabeledPointArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolo::LabeledPointArray_<ContainerAllocator> const> ConstPtr;

}; // struct LabeledPointArray_

typedef ::yolo::LabeledPointArray_<std::allocator<void> > LabeledPointArray;

typedef boost::shared_ptr< ::yolo::LabeledPointArray > LabeledPointArrayPtr;
typedef boost::shared_ptr< ::yolo::LabeledPointArray const> LabeledPointArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolo::LabeledPointArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolo::LabeledPointArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolo::LabeledPointArray_<ContainerAllocator1> & lhs, const ::yolo::LabeledPointArray_<ContainerAllocator2> & rhs)
{
  return lhs.labels == rhs.labels &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolo::LabeledPointArray_<ContainerAllocator1> & lhs, const ::yolo::LabeledPointArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolo::LabeledPointArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo::LabeledPointArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo::LabeledPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo::LabeledPointArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo::LabeledPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo::LabeledPointArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolo::LabeledPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c125202a3740730672f3937d330b8f0b";
  }

  static const char* value(const ::yolo::LabeledPointArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc125202a37407306ULL;
  static const uint64_t static_value2 = 0x72f3937d330b8f0bULL;
};

template<class ContainerAllocator>
struct DataType< ::yolo::LabeledPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolo/LabeledPointArray";
  }

  static const char* value(const ::yolo::LabeledPointArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolo::LabeledPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] labels\n"
"float64[] x\n"
"float64[] y\n"
"float64[] z\n"
;
  }

  static const char* value(const ::yolo::LabeledPointArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolo::LabeledPointArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.labels);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LabeledPointArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolo::LabeledPointArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolo::LabeledPointArray_<ContainerAllocator>& v)
  {
    s << indent << "labels[]" << std::endl;
    for (size_t i = 0; i < v.labels.size(); ++i)
    {
      s << indent << "  labels[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.labels[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLO_MESSAGE_LABELEDPOINTARRAY_H
